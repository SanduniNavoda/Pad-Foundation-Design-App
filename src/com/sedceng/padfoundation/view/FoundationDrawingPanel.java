/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.sedceng.padfoundation.view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 *
 * @author Sanduni Navoda
 */
public class FoundationDrawingPanel extends javax.swing.JPanel {
    private boolean showGroundWaterLine = true;
    /**
     * Creates new form FoundationDrawingPanel
     */
    public FoundationDrawingPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(2));
        
        int panelWidth = getWidth();
        int panelHeight = getHeight();

        int footingWidth = panelWidth - 100;
        int footingHeight = 80;
        int footingX = 50;
        int footingY = panelHeight - footingHeight - 50;

        int columnWidth = 80;
        int columnHeight = 170;
        int columnX = (panelWidth - columnWidth) / 2;
        int columnY = footingY - columnHeight;

        g2.setColor(Color.GRAY);
        g2.fillRect(footingX, footingY, footingWidth, footingHeight);

        g2.setColor(Color.GRAY);
        g2.fillRect(columnX, columnY, columnWidth, columnHeight);

        g2.setColor(Color.BLACK);
//        g2.drawString("Footing Width: " + footingWidth + " mm", footingX, footingY + footingHeight + 15);
//        g2.drawString("Footing Height: " + footingHeight + " mm", footingX, footingY + footingHeight + 30);
//        g2.drawString("Column Width: " + columnWidth + " mm", columnX, columnY - 20);
//        g2.drawString("Column Height: " + columnHeight + " mm", columnX, columnY - 5);
        
        // Ground level line - Orange
        int groundLevelY = columnY + 50;
        g2.setColor(Color.ORANGE);
        g2.drawLine(footingX - 40, groundLevelY, footingX + footingWidth + 40, groundLevelY);
        

        // Groundwater table line - Blue
        if (showGroundWaterLine) {
            // draw groundwater table line
            int waterTableY = footingY - 50;
            g2.setColor(Color.BLUE);
            g2.drawLine(footingX - 40, waterTableY, footingX + footingWidth + 40, waterTableY);
            // specify coordinates for the line
            
            // Dimension arrows
            g2.setColor(Color.BLACK);
            int dimX = footingX + footingWidth + 20;
            drawDoubleArrow(g2, dimX, groundLevelY, dimX, waterTableY);
        }
        
        
        // Dimension arrows
        int colDimX = columnX - 20;
        drawDoubleArrow(g2, colDimX, columnY, colDimX, groundLevelY);

        int footingDimX = footingX - 40;
        drawDoubleArrow(g2, footingDimX, groundLevelY, footingDimX, footingY);
        
    }
    
    

    public void setShowGroundWaterLine(boolean show) {
        this.showGroundWaterLine = show;
        repaint(); // triggers redraw
    }
    
    private void drawArrowHead(Graphics2D g2d, int tipX, int tipY, int tailX, int tailY, int size) {
        double dx = tipX - tailX;
        double dy = tipY - tailY;
        double angle = Math.atan2(dy, dx);
        int x1 = (int) (tipX - size * Math.cos(angle - Math.PI / 6));
        int y1 = (int) (tipY - size * Math.sin(angle - Math.PI / 6));
        int x2 = (int) (tipX - size * Math.cos(angle + Math.PI / 6));
        int y2 = (int) (tipY - size * Math.sin(angle + Math.PI / 6));
        g2d.drawLine(tipX, tipY, x1, y1);
        g2d.drawLine(tipX, tipY, x2, y2);
    }
    
    private void drawDoubleArrow(Graphics2D g2d, int x1, int y1, int x2, int y2) {
        // Draw line
        g2d.drawLine(x1, y1, x2, y2);

        // Draw arrow heads
        int arrowSize = 6;
        drawArrowHead(g2d, x1, y1, x2, y2, arrowSize);
        drawArrowHead(g2d, x2, y2, x1, y1, arrowSize);

        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
